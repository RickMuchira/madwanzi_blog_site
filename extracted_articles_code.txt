===== File: /home/rick110/Downloads/110/madwanzi1/resources/js/pages/articles/editor.tsx =====
import { Head, Link, router, useForm } from '@inertiajs/react';
import { ArrowLeft, Clock, Eye, Image, Save, Upload } from 'lucide-react';
import { useCallback, useEffect, useState } from 'react';
import debounce from 'lodash/debounce';
import axios from 'axios';

import AppLayout from '@/layouts/app-layout';
import { type BreadcrumbItem } from '@/types';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { toast } from '@/components/ui/use-toast';

// Define types for the component props
interface Article {
  uuid: string;
  title: string;
  content: string;
  slug: string;
  word_count?: number;
  reading_time?: number;
}

interface ArticleEditorProps {
  article: Article;
  isNewArticle: boolean;
}

const ArticleEditor = ({ article, isNewArticle }: ArticleEditorProps) => {
    const breadcrumbs: BreadcrumbItem[] = [
        {
            title: 'Dashboard',
            href: '/dashboard',
        },
        {
            title: 'Articles',
            href: '/articles',
        },
        {
            title: isNewArticle ? 'New Article' : article.title || 'Edit Article',
            href: isNewArticle ? '/articles/create' : `/articles/${article.uuid}/edit`,
        },
    ];

    const [saveStatus, setSaveStatus] = useState('Saved');
    const [wordCount, setWordCount] = useState(article.word_count || 0);
    const [readingTime, setReadingTime] = useState(article.reading_time || 0);
    const [slug, setSlug] = useState(article.slug || '');

    const { data, setData, post, processing, errors } = useForm({
        uuid: article.uuid,
        title: article.title || '',
        content: article.content || '',
    });

    // Autosave debounced functions
    const debouncedSaveTitle = useCallback(
        debounce(async (title: string) => {
            if (!title) return;
            
            setSaveStatus('Saving...');
            try {
                const response = await axios.patch(`/articles/${article.uuid}/title`, {
                    uuid: article.uuid,
                    title,
                });
                setSlug(response.data.slug);
                setSaveStatus('Saved');
            } catch (error) {
                setSaveStatus('Failed to save');
                console.error('Error saving title:', error);
            }
        }, 500),
        [article.uuid]
    );

    const debouncedSaveContent = useCallback(
        debounce(async (content: string) => {
            setSaveStatus('Saving...');
            try {
                const response = await axios.patch(`/articles/${article.uuid}/content`, {
                    uuid: article.uuid,
                    content,
                });
                setWordCount(response.data.word_count);
                setReadingTime(response.data.reading_time);
                setSaveStatus('Saved');
            } catch (error) {
                setSaveStatus('Failed to save');
                console.error('Error saving content:', error);
            }
        }, 3000),
        [article.uuid]
    );

    // Handle input changes
    const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const newTitle = e.target.value;
        setData('title', newTitle);
        debouncedSaveTitle(newTitle);
    };

    const handleContentChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
        const newContent = e.target.value;
        setData('content', newContent);
        debouncedSaveContent(newContent);
    };

    // Save article
    const handleSave = () => {
        setSaveStatus('Saving...');
        post(route('articles.store'), {
            onSuccess: () => {
                setSaveStatus('Saved');
                toast({
                    title: 'Article saved',
                    description: 'Your article has been saved successfully.',
                });
            },
            onError: () => {
                setSaveStatus('Failed to save');
                toast({
                    title: 'Failed to save',
                    description: 'There was an error saving your article.',
                    variant: 'destructive',
                });
            },
        });
    };

    // Preview article
    const handlePreview = async () => {
        try {
            const response = await axios.post('/articles/preview', {
                uuid: article.uuid,
            });
            
            // Open preview in new tab
            window.open(response.data.preview_url, '_blank');
        } catch (error) {
            console.error('Error generating preview:', error);
            toast({
                title: 'Preview failed',
                description: 'Could not generate article preview.',
                variant: 'destructive',
            });
        }
    };

    // Publish article
    const handlePublish = async () => {
        if (!data.title.trim()) {
            toast({
                title: 'Cannot publish',
                description: 'Your article needs a title before publishing.',
                variant: 'destructive',
            });
            return;
        }

        if (!data.content.trim()) {
            toast({
                title: 'Cannot publish',
                description: 'Your article needs content before publishing.',
                variant: 'destructive',
            });
            return;
        }

        try {
            const response = await axios.post(`/articles/${article.uuid}/publish`, {
                uuid: article.uuid,
            });
            
            toast({
                title: 'Article published',
                description: 'Your article has been published successfully.',
            });
            
            // Redirect to published article
            router.visit(response.data.article_url);
        } catch (error) {
            console.error('Error publishing article:', error);
            toast({
                title: 'Publish failed',
                description: 'Could not publish article.',
                variant: 'destructive',
            });
        }
    };

    // Handle media upload
    const handleMediaUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
        const file = e.target.files?.[0];
        if (!file) return;

        const formData = new FormData();
        formData.append('file', file);
        formData.append('article_uuid', article.uuid);

        try {
            const response = await axios.post('/articles/media', formData, {
                headers: {
                    'Content-Type': 'multipart/form-data',
                },
            });

            // Insert image at cursor position in content
            const mediaUrl = response.data.media.url;
            const textArea = document.getElementById('content') as HTMLTextAreaElement;
            if (textArea) {
                const cursorPos = textArea.selectionStart;
                const textBefore = data.content.substring(0, cursorPos);
                const textAfter = data.content.substring(cursorPos);
                
                const imageMarkdown = `<img src="${mediaUrl}" alt="${response.data.media.filename}" />`;
                const newContent = textBefore + imageMarkdown + textAfter;
                
                setData('content', newContent);
                debouncedSaveContent(newContent);
            }
            
            toast({
                title: 'Image uploaded',
                description: 'Image has been uploaded and inserted.',
            });
        } catch (error) {
            console.error('Error uploading media:', error);
            toast({
                title: 'Upload failed',
                description: 'Could not upload image.',
                variant: 'destructive',
            });
        }
    };

    return (
        <AppLayout breadcrumbs={breadcrumbs}>
            <Head title={isNewArticle ? 'Create New Article' : `Edit: ${article.title || 'Untitled'}`} />

            <div className="flex h-full flex-col">
                {/* Editor toolbar */}
                <div className="border-b bg-white p-2 dark:bg-neutral-950">
                    <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-2">
                            <Button variant="ghost" size="sm" asChild>
                                <Link href="/articles">
                                    <ArrowLeft className="h-4 w-4 mr-1" />
                                    Back
                                </Link>
                            </Button>
                            <div className="text-sm text-neutral-500">
                                {saveStatus}
                            </div>
                        </div>
                        <div className="flex items-center space-x-2">
                            <div className="flex items-center text-sm text-neutral-500">
                                <Clock className="h-4 w-4 mr-1" />
                                {readingTime} min read â€¢ {wordCount} words
                            </div>
                            
                            <input
                                type="file"
                                id="media-upload"
                                className="hidden"
                                accept="image/*"
                                onChange={handleMediaUpload}
                            />
                            <Button variant="outline" size="sm" onClick={() => {
                                const uploadInput = document.getElementById('media-upload') as HTMLInputElement;
                                if (uploadInput) uploadInput.click();
                            }}>
                                <Image className="h-4 w-4 mr-1" />
                                Add Image
                            </Button>
                            
                            <Button variant="outline" size="sm" onClick={handlePreview}>
                                <Eye className="h-4 w-4 mr-1" />
                                Preview
                            </Button>
                            
                            <Button variant="outline" size="sm" onClick={handleSave}>
                                <Save className="h-4 w-4 mr-1" />
                                Save
                            </Button>
                            
                            <Dialog>
                                <DialogTrigger asChild>
                                    <Button>
                                        <Upload className="h-4 w-4 mr-1" />
                                        Publish
                                    </Button>
                                </DialogTrigger>
                                <DialogContent aria-describedby="publish-dialog-description">
                                    <DialogHeader>
                                        <DialogTitle>Publish Article</DialogTitle>
                                        <DialogDescription id="publish-dialog-description">
                                            Publishing will make your article available to the public. Are you ready to publish?
                                        </DialogDescription>
                                    </DialogHeader>
                                    
                                    <div className="space-y-4 py-4">
                                        <div>
                                            <h3 className="text-sm font-medium">Title</h3>
                                            <p className="text-sm text-neutral-500">{data.title || 'Untitled'}</p>
                                        </div>
                                        
                                        <div>
                                            <h3 className="text-sm font-medium">URL</h3>
                                            <p className="text-sm text-neutral-500">/articles/{slug}</p>
                                        </div>
                                        
                                        <div>
                                            <h3 className="text-sm font-medium">Reading time</h3>
                                            <p className="text-sm text-neutral-500">{readingTime} min â€¢ {wordCount} words</p>
                                        </div>
                                    </div>
                                    
                                    <div className="flex justify-end space-x-2">
                                        <Button variant="outline" onClick={handlePreview}>
                                            Preview First
                                        </Button>
                                        <Button onClick={handlePublish}>
                                            Publish Now
                                        </Button>
                                    </div>
                                </DialogContent>
                            </Dialog>
                        </div>
                    </div>
                </div>

                {/* Editor area */}
                <div className="flex-1 overflow-auto">
                    <div className="container mx-auto max-w-4xl p-6">
                        <div className="space-y-6">
                            <div>
                                <Input
                                    id="title"
                                    value={data.title}
                                    onChange={handleTitleChange}
                                    placeholder="Article Title"
                                    className="border-none text-3xl font-bold focus-visible:ring-0 focus-visible:ring-offset-0"
                                />
                                {slug && (
                                    <div className="mt-1 text-sm text-neutral-500">
                                        URL: /articles/{slug}
                                    </div>
                                )}
                            </div>
                            
                            <Textarea
                                id="content"
                                value={data.content}
                                onChange={handleContentChange}
                                placeholder="Start writing your article..."
                                className="min-h-[500px] border-none focus-visible:ring-0 focus-visible:ring-offset-0 resize-none"
                            />
                        </div>
                    </div>
                </div>
            </div>
        </AppLayout>
    );
};

export default ArticleEditor;


===== File: /home/rick110/Downloads/110/madwanzi1/resources/js/pages/articles/index.tsx =====
import { Head, Link } from '@inertiajs/react';
import { Calendar, Clock, Edit, Plus, Trash } from 'lucide-react';
import { Fragment } from 'react';

import AppLayout from '@/layouts/app-layout';
import { type BreadcrumbItem } from '@/types';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';

const breadcrumbs: BreadcrumbItem[] = [
    {
        title: 'Dashboard',
        href: '/dashboard',
    },
    {
        title: 'Articles',
        href: '/articles',
    },
];

export default function ArticlesIndex({ articles }) {
    return (
        <AppLayout breadcrumbs={breadcrumbs}>
            <Head title="My Articles" />
            
            <div className="p-4 md:p-6 flex flex-col space-y-6">
                <div className="flex items-center justify-between">
                    <h1 className="text-2xl font-bold">My Articles</h1>
                    <Button asChild>
                        <Link href="/articles/create" className="flex items-center space-x-2">
                            <Plus className="h-4 w-4" />
                            <span>Create New Article</span>
                        </Link>
                    </Button>
                </div>
                
                {articles.length === 0 ? (
                    <div className="rounded-lg border border-dashed p-8 text-center">
                        <h3 className="text-lg font-medium mb-2">No articles yet</h3>
                        <p className="text-neutral-500 mb-4">Create your first article to get started</p>
                        <Button asChild>
                            <Link href="/articles/create" className="flex items-center space-x-2">
                                <Plus className="h-4 w-4" />
                                <span>Create New Article</span>
                            </Link>
                        </Button>
                    </div>
                ) : (
                    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                        {articles.map((article) => (
                            <Card key={article.uuid} className="flex flex-col">
                                <CardHeader>
                                    <CardTitle className="line-clamp-2">
                                        {article.title || 'Untitled Article'}
                                    </CardTitle>
                                    <CardDescription className="flex items-center text-xs gap-1">
                                        <span className={`px-2 py-1 rounded-full text-xs ${
                                            article.status === 'published' 
                                                ? 'bg-green-100 text-green-800'
                                                : 'bg-yellow-100 text-yellow-800'
                                        }`}>
                                            {article.status === 'published' ? 'Published' : 'Draft'}
                                        </span>
                                        {article.status === 'published' && (
                                            <Fragment>
                                                <span className="inline-flex items-center gap-1">
                                                    <Calendar className="h-3 w-3" />
                                                    {new Date(article.published_at).toLocaleDateString()}
                                                </span>
                                            </Fragment>
                                        )}
                                    </CardDescription>
                                </CardHeader>
                                
                                <CardContent className="flex-grow">
                                    <p className="text-neutral-600 line-clamp-3">
                                        {article.content 
                                            ? article.content.replace(/<[^>]*>/g, '').substring(0, 150) 
                                            : 'No content yet'}
                                    </p>
                                </CardContent>
                                
                                <CardFooter className="flex justify-between border-t p-4">
                                    <div className="text-xs text-neutral-500 flex items-center">
                                        <Clock className="h-3 w-3 mr-1" />
                                        {article.reading_time} min read
                                    </div>
                                    
                                    <div className="flex gap-2">
                                        <Button variant="outline" size="sm" asChild>
                                            <Link href={`/articles/${article.uuid}/edit`}>
                                                <Edit className="h-4 w-4" />
                                                <span className="sr-only">Edit</span>
                                            </Link>
                                        </Button>
                                        
                                        <AlertDialog>
                                            <AlertDialogTrigger asChild>
                                                <Button variant="outline" size="sm">
                                                    <Trash className="h-4 w-4 text-red-500" />
                                                    <span className="sr-only">Delete</span>
                                                </Button>
                                            </AlertDialogTrigger>
                                            <AlertDialogContent>
                                                <AlertDialogHeader>
                                                    <AlertDialogTitle>Are you sure?</AlertDialogTitle>
                                                    <AlertDialogDescription>
                                                        This will permanently delete the article and all associated data.
                                                        This action cannot be undone.
                                                    </AlertDialogDescription>
                                                </AlertDialogHeader>
                                                <AlertDialogFooter>
                                                    <AlertDialogCancel>Cancel</AlertDialogCancel>
                                                    <AlertDialogAction asChild>
                                                        <Link 
                                                            href={`/articles/${article.uuid}`} 
                                                            method="delete" 
                                                            as="button"
                                                            className="bg-red-500 hover:bg-red-600 text-white"
                                                        >
                                                            Delete
                                                        </Link>
                                                    </AlertDialogAction>
                                                </AlertDialogFooter>
                                            </AlertDialogContent>
                                        </AlertDialog>
                                    </div>
                                </CardFooter>
                            </Card>
                        ))}
                    </div>
                )}
            </div>
        </AppLayout>
    );
}


===== File: /home/rick110/Downloads/110/madwanzi1/resources/js/pages/articles/preview.tsx =====
import { Head, Link } from '@inertiajs/react';
import { ArrowLeft, Calendar, Clock, Edit } from 'lucide-react';
import { Fragment } from 'react';

import AppLayout from '@/layouts/app-layout';
import { Button } from '@/components/ui/button';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';

export default function ArticlePreview({ article, author, isPreview = true }) {
    const formattedDate = article.published_at 
        ? new Date(article.published_at).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        })
        : 'Not yet published';
        
    return (
        <AppLayout>
            <Head title={article.title || 'Article Preview'} />
            
            {isPreview && (
                <div className="bg-yellow-50 border-b border-yellow-200 p-2 text-center">
                    <div className="flex items-center justify-center space-x-2">
                        <span className="text-yellow-800">Preview Mode</span>
                        <Button variant="outline" size="sm" asChild>
                            <Link href={`/articles/${article.uuid}/edit`}>
                                <Edit className="h-4 w-4 mr-1" />
                                Return to Editor
                            </Link>
                        </Button>
                    </div>
                </div>
            )}
            
            <div className="container mx-auto max-w-4xl p-6">
                <div className="mb-8">
                    <Button variant="outline" size="sm" asChild>
                        <Link href={isPreview ? `/articles/${article.uuid}/edit` : '/articles'}>
                            <ArrowLeft className="h-4 w-4 mr-1" />
                            {isPreview ? 'Back to Editor' : 'Back to Articles'}
                        </Link>
                    </Button>
                </div>
                
                <article className="space-y-8">
                    <header className="space-y-4 text-center">
                        <h1 className="text-3xl font-bold md:text-4xl lg:text-5xl">
                            {article.title || 'Untitled Article'}
                        </h1>
                        
                        <div className="flex items-center justify-center space-x-4 text-neutral-500">
                            <div className="flex items-center space-x-2">
                                <Avatar className="h-10 w-10">
                                    <AvatarImage src={author.avatar} alt={author.name} />
                                    <AvatarFallback className="bg-neutral-200 text-neutral-800">
                                        {author.name.split(' ').map(n => n[0]).join('')}
                                    </AvatarFallback>
                                </Avatar>
                                <span>{author.name}</span>
                            </div>
                            
                            <span className="h-4 border-l border-neutral-300"></span>
                            
                            <div className="flex items-center">
                                <Calendar className="h-4 w-4 mr-1" />
                                <span>{formattedDate}</span>
                            </div>
                            
                            <span className="h-4 border-l border-neutral-300"></span>
                            
                            <div className="flex items-center">
                                <Clock className="h-4 w-4 mr-1" />
                                <span>{article.reading_time} min read</span>
                            </div>
                        </div>
                    </header>
                    
                    <div className="prose prose-neutral dark:prose-invert prose-headings:font-bold prose-h1:text-2xl prose-h2:text-xl prose-h3:text-lg prose-img:rounded-lg max-w-none">
                        {article.content ? (
                            <div dangerouslySetInnerHTML={{ __html: article.content }} />
                        ) : (
                            <p className="text-neutral-500 italic">No content yet</p>
                        )}
                    </div>
                </article>
            </div>
        </AppLayout>
    );
}


===== File: /home/rick110/Downloads/110/madwanzi1/resources/js/pages/articles/show.tsx =====
import { Head, Link } from '@inertiajs/react';
import { ArrowLeft, Calendar, Clock, Share } from 'lucide-react';

import AppLayout from '@/layouts/app-layout';
import { Button } from '@/components/ui/button';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Separator } from '@/components/ui/separator';
import { 
    DropdownMenu, 
    DropdownMenuContent, 
    DropdownMenuItem, 
    DropdownMenuTrigger 
} from '@/components/ui/dropdown-menu';
import { toast } from '@/components/ui/use-toast';

export default function ArticleShow({ article, author }) {
    const formattedDate = article.published_at 
        ? new Date(article.published_at).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        })
        : 'Not yet published';
    
    const handleShare = (platform) => {
        const url = window.location.href;
        const title = article.title;
        
        let shareUrl;
        
        switch (platform) {
            case 'twitter':
                shareUrl = `https://twitter.com/intent/tweet?url=${encodeURIComponent(url)}&text=${encodeURIComponent(title)}`;
                break;
            case 'facebook':
                shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`;
                break;
            case 'linkedin':
                shareUrl = `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(url)}`;
                break;
            case 'copy':
                navigator.clipboard.writeText(url).then(() => {
                    toast({
                        title: 'Link copied',
                        description: 'Article link copied to clipboard',
                    });
                });
                return;
            default:
                return;
        }
        
        window.open(shareUrl, '_blank');
    };
    
    return (
        <AppLayout>
            <Head title={article.title || 'Article'} />
            
            <div className="container mx-auto max-w-4xl p-6">
                <div className="mb-8 flex items-center justify-between">
                    <Button variant="outline" size="sm" asChild>
                        <Link href="/articles">
                            <ArrowLeft className="h-4 w-4 mr-1" />
                            Back to Articles
                        </Link>
                    </Button>
                    
                    <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                            <Button variant="outline" size="sm">
                                <Share className="h-4 w-4 mr-1" />
                                Share
                            </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                            <DropdownMenuItem onClick={() => handleShare('twitter')}>
                                Share on Twitter
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => handleShare('facebook')}>
                                Share on Facebook
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => handleShare('linkedin')}>
                                Share on LinkedIn
                            </DropdownMenuItem>
                            <Separator className="my-1" />
                            <DropdownMenuItem onClick={() => handleShare('copy')}>
                                Copy link
                            </DropdownMenuItem>
                        </DropdownMenuContent>
                    </DropdownMenu>
                </div>
                
                <article className="space-y-8">
                    <header className="space-y-4 text-center">
                        <h1 className="text-3xl font-bold md:text-4xl lg:text-5xl">
                            {article.title}
                        </h1>
                        
                        <div className="flex items-center justify-center space-x-4 text-neutral-500">
                            <div className="flex items-center space-x-2">
                                <Avatar className="h-10 w-10">
                                    <AvatarImage src={author.avatar} alt={author.name} />
                                    <AvatarFallback className="bg-neutral-200 text-neutral-800">
                                        {author.name.split(' ').map(n => n[0]).join('')}
                                    </AvatarFallback>
                                </Avatar>
                                <span>{author.name}</span>
                            </div>
                            
                            <span className="h-4 border-l border-neutral-300"></span>
                            
                            <div className="flex items-center">
                                <Calendar className="h-4 w-4 mr-1" />
                                <span>{formattedDate}</span>
                            </div>
                            
                            <span className="h-4 border-l border-neutral-300"></span>
                            
                            <div className="flex items-center">
                                <Clock className="h-4 w-4 mr-1" />
                                <span>{article.reading_time} min read</span>
                            </div>
                        </div>
                    </header>
                    
                    <div className="prose prose-neutral dark:prose-invert prose-headings:font-bold prose-h1:text-2xl prose-h2:text-xl prose-h3:text-lg prose-img:rounded-lg max-w-none">
                        <div dangerouslySetInnerHTML={{ __html: article.content }} />
                    </div>
                    
                    <Separator className="my-8" />
                    
                    <div className="bg-neutral-50 dark:bg-neutral-900 rounded-lg p-6">
                        <div className="flex items-center space-x-4">
                            <Avatar className="h-12 w-12">
                                <AvatarImage src={author.avatar} alt={author.name} />
                                <AvatarFallback className="bg-neutral-200 text-neutral-800">
                                    {author.name.split(' ').map(n => n[0]).join('')}
                                </AvatarFallback>
                            </Avatar>
                            <div>
                                <h3 className="text-lg font-medium">Written by {author.name}</h3>
                                <p className="text-neutral-500">Author of {author.articles_count || 'multiple'} articles</p>
                            </div>
                        </div>
                    </div>
                </article>
            </div>
        </AppLayout>
    );
}


